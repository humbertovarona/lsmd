
# Generated by CodiumAI

import unittest

class TestGenerateDirectoryStructureMarkdown(unittest.TestCase):

    #  Generates a markdown file with the directory structure of a given path.
    def test_generate_directory_structure_markdown_generates_file_with_directory_structure(self):
        # Arrange
        path = "test_directory"
    
        # Act
        generate_directory_structure_markdown(path)
    
        # Assert
        self.assertTrue(os.path.exists("directory_structure.md"))
        with open("directory_structure.md", "r") as md_file:
            content = md_file.read()
            self.assertIn("# Directory:", content)
            self.assertIn("test_directory/", content)
            self.assertIn("subdirectory/", content)
            self.assertIn("file.txt", content)
            self.assertIn("file2.txt", content)
            self.assertNotIn(".hidden_file", content)
            self.assertNotIn(".gitignore", content)
            self.assertNotIn("directory_structure.md", content)

    #  Excludes directories and files starting with '.' or ending with '.gitignore' or '.ignore'.
    def test_generate_directory_structure_markdown_excludes_hidden_files_and_directories(self):
        # Arrange
        path = "test_directory"
    
        # Act
        generate_directory_structure_markdown(path)
    
        # Assert
        with open("directory_structure.md", "r") as md_file:
            content = md_file.read()
            self.assertNotIn(".hidden_dir/", content)
            self.assertNotIn(".hidden_file", content)
            self.assertNotIn(".gitignore", content)
            self.assertNotIn(".ignore", content)

    #  Excludes the 'directory_structure.md' file from the output.
    def test_generate_directory_structure_markdown_excludes_output_file(self):
        # Arrange
        path = "test_directory"
    
        # Act
        generate_directory_structure_markdown(path)
    
        # Assert
        with open("directory_structure.md", "r") as md_file:
            content = md_file.read()
            self.assertNotIn("directory_structure.md", content)

    #  Handles the case where the given path does not exist.
    def test_generate_directory_structure_markdown_handles_nonexistent_path(self):
        # Arrange
        path = "nonexistent_directory"
    
        # Act & Assert
        with self.assertRaises(FileNotFoundError):
            generate_directory_structure_markdown(path)

    #  Handles the case where the given path is a file instead of a directory.
    def test_generate_directory_structure_markdown_handles_file_path(self):
        # Arrange
        path = "test_directory/file.txt"
    
        # Act & Assert
        with self.assertRaises(NotADirectoryError):
            generate_directory_structure_markdown(path)

    #  Formats the file size of each file in a human-readable format.
    def test_generate_directory_structure_markdown_formats_file_size(self):
        # Arrange
        path = "test_directory"
    
        # Act
        generate_directory_structure_markdown(path)
    
        # Assert
        with open("directory_structure.md", "r") as md_file:
            content = md_file.read()
            self.assertIn("[1.0 kB]", content)
            self.assertIn("[2.0 kB]", content)
